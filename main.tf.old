variable "deepgram_api" {
  description = "The Deepgram endpoint to stream audio to"
  type        = string
  default     = "wss://api.deepgram.com/v1/listen"
}

variable "deepgram_api_key" {
  description = "Your Deepgram API key"
  type        = string
  sensitive   = true
}

variable "vpc_id" {
  description = "VPC where the resources will be deployed"
  type        = string
}

variable "subnets" {
  description = "Subnets where the resources will be deployed"
  type        = list(string)
}

variable "kvs_dg_trigger_image" {
  description = "Docker image of the trigger lambda"
  type        = string
  default     = "123456789012.dkr.ecr.region.amazonaws.com/image:tag"
}

variable "kvs_dg_trigger_log_level" {
  description = "Logging level for the trigger lambda"
  type        = string
  default     = "info"
}
# ...repeat for other parameters


resource "aws_iam_role" "kvs_dg_trigger_role" {
  name = "kvs-dg-trigger-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      Action = "sts:AssumeRole"
    }]
  })
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  ]
}

resource "aws_security_group" "kvs_dg_trigger_sg" {
  name        = "kvs-dg-trigger-sg"
  description = "Security group for kvs-dg-trigger Lambda function"
  vpc_id      = var.vpc_id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }
}

resource "aws_lambda_function" "kvs_dg_trigger" {
  function_name = "kvs-dg-trigger"
  package_type  = "Image"
  image_uri     = var.kvs_dg_trigger_image
  role          = aws_iam_role.kvs_dg_trigger_role.arn
  timeout       = 900

  environment {
    variables = {
      KVS_DG_INTEGRATOR_DOMAIN = aws_lb.kvs_dg_integrator_lb.dns_name
      LOG_LEVEL                = var.kvs_dg_trigger_log_level
    }
  }

  vpc_config {
    security_group_ids = [aws_security_group.kvs_dg_trigger_sg.id]
    subnet_ids         = var.subnets
  }
}

resource "aws_ecs_cluster" "kvs_dg_integrator_cluster" {
  name = "kvs-dg-integrator-cluster"
  setting {
    name  = "containerInsights"
    value = "disabled"
  }
}

resource "aws_ecs_task_definition" "kvs_dg_integrator" {
  family                   = "kvs-dg-integrator-task-family"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = var.kvs_dg_integrator_task_cpu
  memory                   = var.kvs_dg_integrator_task_memory
  execution_role_arn       = aws_iam_role.kvs_dg_integrator_execution_role.arn
  task_role_arn            = aws_iam_role.kvs_dg_integrator_task_role.arn

  container_definitions = jsonencode([
    {
      name      = "kvs-dg-integrator-container"
      image     = var.kvs_dg_integrator_image
      portMappings = [{
        containerPort = 80
        hostPort      = 80
        protocol      = "tcp"
      }]
      environment = [
        { name = "DEEPGRAM_API", value = var.deepgram_api },
        { name = "DEEPGRAM_API_KEY", value = var.deepgram_api_key },
        { name = "LOG_LEVEL", value = var.kvs_dg_integrator_log_level },
        { name = "APP_REGION", value = data.aws_region.current.name }
      ]
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = "/ecs/kvs-dg-integrator"
          awslogs-region        = data.aws_region.current.name
          awslogs-stream-prefix = "ecs"
        }
      }
    }
  ])
}
resource "aws_lb" "kvs_dg_integrator_lb" {
  name               = "kvs-dg-integrator-lb"
  internal           = true
  load_balancer_type = "application"
  subnets            = var.subnets
  security_groups    = [aws_security_group.kvs_dg_integrator_lb_sg.id]
}

resource "aws_lb_target_group" "kvs_dg_integrator_tg" {
  name     = "kvs-dg-integrator-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id
  target_type = "ip"

  health_check {
    path                = "/health-check"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener" "kvs_dg_integrator_listener" {
  load_balancer_arn = aws_lb.kvs_dg_integrator_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.kvs_dg_integrator_tg.arn
  }
}